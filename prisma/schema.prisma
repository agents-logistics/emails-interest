// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole{
  ADMIN
  USER
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}


model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model BonusRuns {
  runId                Int      @id @default(autoincrement())
  createdAt            DateTime @default(now())
  status               String   @default("started")
  conversionDollarToILS Float?
  totalShippingCost    Float?
  name                 String?  // New column added previously
  physicianCommisionFee Float?  // Newly added column
  totalBloodTakingFee Float? //Another newly added column
}

model RunData {
  rowId             String   @id @default(cuid())
  runId             Int
  documentNumber    String
  customerName      String
  date              DateTime
  testName          String?
  testDetails       String?
  physicianReferred String?
  hospital          String?
  signedOrderDate   DateTime?
  totalPaid         Float?
  matchedTestName   String?
  agents                          String?
}


model SmartsheetMap {
  smartsheetId      String   @id
  customerName      String?
  testName          String?
  testDetails       String?
  physicianName     String?
  hospitalName      String?
  signedOrderDate   String?
  defaultCustomerName String?
  defaultTestName      String?
  defaultTestDetails   String?
  defaultPhysicianName String?
  defaultHospitalName  String?
  defaultSignedOrderDate String?
  documentNumber    String?
  defaultDocumentNumber String?
}



model CommonTests {
  test_name                           String   @id
  credit_card_fee_per_case            Float?
  lab_fee_per_case                    Float?
  international_shipping_fee_per_case Float?
  blood_drawing_fee                   Float?
  biopsy_retrieval_fee_per_case       Float?
  urine_collection_fee                Float?
  physician_fee                       Float?
  alias                               String?
  min_test_value                      Float?
  max_test_value                      Float?
  min_gross_percentage                Float?
  max_gross_percentage                Float?
  AgentsCommission                    AgentsCommission[] 
}

model TestsRunId {
  runId                           Int
  test_name                       String   
  credit_card_fee_per_case        Float?
  lab_fee_per_case                Float?
  international_shipping_fee_per_case Float?
  blood_drawing_fee               Float?
  biopsy_retrieval_fee_per_case   Float?
  urine_collection_fee            Float?
  physician_fee                   Float?
  min_test_value                  Float?
  max_test_value                  Float?
  min_gross_percentage            Float?
  max_gross_percentage            Float?

  @@id([runId, test_name])
  @@unique([runId, test_name])
}

model AgentLink {
  agentLinkId String @id @default(uuid())
  runId Int
  expiryTime DateTime
}



model Agents {
  agentId   String           @id @default(uuid())
  agentName String
  AgentsCommission AgentsCommission[] 
}

model AgentsCommission {
  commissionId String  @id @default(uuid())
  agentId      String
  test_name    String
  commission   Float

  agent        Agents      @relation(fields: [agentId], references: [agentId])
  test         CommonTests @relation(fields: [test_name], references: [test_name])

  @@unique([agentId, test_name])
}

model SpecialCommission {
  specialCommissionId String @id @default(uuid())
  runId               Int
  agentId             String
  documentNumber      String
  testName            String
  customerName        String
  specialCommission   Float

  @@unique([runId, agentId, documentNumber, testName, customerName])
}

// ==============================================
// New models for Patient Tests and Email Templates
// ==============================================

model PatientTest {
  id            String     @id @default(cuid())
  name          String     @unique
  templateNames String[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  templates     EmailTemplate[]
  pricingOptions TestPricingOption[]
}

model TestPricingOption {
  id            String      @id @default(cuid())
  testId        String
  installment   Int
  price         Float
  icreditText   String
  icreditLink   String
  iformsText    String
  iformsLink    String

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  test          PatientTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([testId])
}

model EmailTemplate {
  id           String           @id @default(cuid())
  testId       String
  body         String
  subject      String?          // Email subject (optional, for backward compatibility)
  isRTL        Boolean          @default(true)
  clalitText   String?          // Clalit-specific content for patients with Clalit insurance
  attachments  EmailAttachment[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  test         PatientTest      @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([testId])
}

model EmailAttachment {
  id          String   @id @default(cuid())
  templateId  String
  filename    String   // Stored filename (UUID-based)
  originalName String  // Original uploaded filename
  filePath    String   // Path on server
  fileSize    Int      // Size in bytes
  mimeType    String   // MIME type
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  template    EmailTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model BloodTestLocation {
  id           String   @id @default(cuid())
  name         String   @unique  // Short label for dropdown
  templateText String             // Full text for email template
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CCDefaultEmail {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
